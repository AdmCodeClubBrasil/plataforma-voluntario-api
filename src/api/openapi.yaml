openapi: 3.0.3
info:
  title: API do Voluntário Code Club Brasil
  description: Esta é a documentação da API de gestão de Code Clubes e Voluntários
  contact:
    email: infra@codeclubbrasil.org.br
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: /
tags:
- name: club
  description: Tudo sobre os dados club
- name: user
  description: Tudo sobre voluntários
paths:
  /club:
    get:
      tags:
      - club
      summary: Buscar Code Clubs
      description: "Buscar Code Clubs por nome, estado, cidade"
      operationId: findClub
      parameters:
      - name: name
        in: query
        description: Nome do Code Club
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        description: Estado do Code Club
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: city
        in: query
        description: Cidade do Code Club
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: neighborhood
        in: query
        description: Bairro do Code Club
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
      x-swagger-router-controller: Club
  /user:
    post:
      tags:
      - user
      summary: Adiciona um novo voluntário
      description: Add a new pet to the store
      operationId: addUser
      requestBody:
        description: Cria um novo voluntario na plataforma
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Voluntary'
          application/xml:
            schema:
              $ref: '#/components/schemas/Voluntary'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Voluntary'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voluntary'
        "405":
          description: Invalid input
      x-swagger-router-controller: User
  /user/login:
    get:
      tags:
      - user
      summary: Logar na plataforma
      description: ""
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The user name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Invalid username/password supplied
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
      - user
      summary: Sair da sessão do usuario logado
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
  /user/send-document:
    post:
      tags:
      - user
      summary: Adiciona um novo voluntário
      description: Add a new pet to the store
      operationId: sendDocumentUser
      requestBody:
        description: Envio de documento na plataforma
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/user_senddocument_body'
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
components:
  schemas:
    Voluntary:
      required:
      - lastName
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: marry
        lastName:
          type: string
          example: marry
        tels:
          type: array
          items:
            type: string
        email:
          type: string
          example: marry@gmail.com
        password:
          type: string
          example: "123"
        city:
          type: string
          example: Niterói
        state:
          type: string
          example: Rio de Janeiro
        neighborhood:
          type: string
          example: Icarai
        knowledges:
          type: array
          example:
          - Programacao
          - Designer
          - Professor
          items:
            type: string
        availableTimes:
          type: array
          items:
            $ref: '#/components/schemas/AvailableTime'
      example:
        lastName: marry
        password: "123"
        city: Niterói
        name: marry
        id: 10
        state: Rio de Janeiro
        neighborhood: Icarai
        tels:
        - tels
        - tels
        email: marry@gmail.com
        knowledges:
        - Programacao
        - Designer
        - Professor
        availableTimes:
        - weekDays:
          - "seg, ter"
          - "seg, ter"
          time:
            endHour: 11:00
            startHour: 10:00
        - weekDays:
          - "seg, ter"
          - "seg, ter"
          time:
            endHour: 11:00
            startHour: 10:00
    AvailableTime:
      type: object
      properties:
        weekDays:
          type: array
          items:
            type: string
            example: "seg, ter"
            enum:
            - seg
            - ter
            - qua
            - qui
            - sex
            - sab
            - dom
        time:
          $ref: '#/components/schemas/AvailableTime_time'
      example:
        weekDays:
        - "seg, ter"
        - "seg, ter"
        time:
          endHour: 11:00
          startHour: 10:00
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: marry
        lastName:
          type: string
          example: marry
        tels:
          type: array
          items:
            type: string
        email:
          type: string
          example: marry@gmail.com
        password:
          type: string
          example: "123"
        city:
          type: string
          example: Niterói
        state:
          type: string
          example: Rio de Janeiro
        neighborhood:
          type: string
          example: Icarai
      example:
        lastName: marry
        password: "123"
        city: Niterói
        name: marry
        id: 10
        state: Rio de Janeiro
        neighborhood: Icarai
        tels:
        - tels
        - tels
        email: marry@gmail.com
    Club:
      type: object
      properties:
        name:
          type: string
          example: 'Code Club Transform The World '
        responsibleName:
          type: string
          example: Marry
        contacts:
          type: array
          example:
          - contato@minhaong.org
          - "21123456789"
          items:
            type: string
        address:
          $ref: '#/components/schemas/Address'
        availableTimes:
          type: array
          items:
            $ref: '#/components/schemas/AvailableTime'
      example:
        address:
          zipcode: zipcode
          address: address
          city: Niterói
          state: Rio de Janeiro
          neighborhood: Icarai
          complement: complement
        name: 'Code Club Transform The World '
        responsibleName: Marry
        contacts:
        - contato@minhaong.org
        - "21123456789"
        availableTimes:
        - weekDays:
          - "seg, ter"
          - "seg, ter"
          time:
            endHour: 11:00
            startHour: 10:00
        - weekDays:
          - "seg, ter"
          - "seg, ter"
          time:
            endHour: 11:00
            startHour: 10:00
    Address:
      type: object
      properties:
        address:
          type: string
        complement:
          type: string
        city:
          type: string
          example: Niterói
        state:
          type: string
          example: Rio de Janeiro
        neighborhood:
          type: string
          example: Icarai
        zipcode:
          type: string
      example:
        zipcode: zipcode
        address: address
        city: Niterói
        state: Rio de Janeiro
        neighborhood: Icarai
        complement: complement
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    inline_response_200:
      type: object
      properties:
        token:
          type: string
      example:
        token: token
    user_senddocument_body:
      type: object
      properties:
        documentType:
          type: string
        fileName:
          type: string
          format: binary
    AvailableTime_time:
      type: object
      properties:
        startHour:
          type: string
          example: 10:00
        endHour:
          type: string
          example: 11:00
      example:
        endHour: 11:00
        startHour: 10:00
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
